{"version":3,"sources":["../../src/flow/language.js"],"names":["typeDeclaration","propertyDeclaration","propertyDeclarations","generator","closure","interfaceName","printNewlineIfNeeded","printNewline","print","pushScope","typeName","withinBlock","popScope","propertyName","description","isArray","isNullable","inInterface","fragmentSpreads","printOnNewline","length","map","n","join","properties","forEach","property"],"mappings":";;;;;QAOgBA,e,GAAAA,e;QAUAC,mB,GAAAA,mB;QAsCAC,oB,GAAAA,oB;;AAvDhB;;AAKA;;AAEO,SAASF,eAAT,CAAyBG,SAAzB,QAAuDC,OAAvD,EAAgE;AAAA,MAA1BC,aAA0B,QAA1BA,aAA0B;;AACrEF,YAAUG,oBAAV;AACAH,YAAUI,YAAV;AACAJ,YAAUK,KAAV,CAAiB,eAAeH,aAAe,IAA/C;AACAF,YAAUM,SAAV,CAAoB,EAAEC,UAAUL,aAAZ,EAApB;AACAF,YAAUQ,WAAV,CAAsBP,OAAtB;AACAD,YAAUS,QAAV;AACAT,YAAUK,KAAV,CAAgB,GAAhB;AACD;;AAEM,SAASP,mBAAT,CAA6BE,SAA7B,SAAoIC,OAApI,EAA6I;AAAA,MAAnGS,YAAmG,SAAnGA,YAAmG;AAAA,MAArFH,QAAqF,SAArFA,QAAqF;AAAA,MAA3EI,WAA2E,SAA3EA,WAA2E;AAAA,MAA9DC,OAA8D,SAA9DA,OAA8D;AAAA,MAArDC,UAAqD,SAArDA,UAAqD;AAAA,MAAzCC,WAAyC,SAAzCA,WAAyC;AAAA,MAA5BC,eAA4B,SAA5BA,eAA4B;;AAClJf,YAAUgB,cAAV,CAAyBL,eAAgB,MAAKA,WAAY,EAA1D;AACA,MAAIV,OAAJ,EAAa;AACXD,cAAUgB,cAAV,CAA0B,GAAEN,YAAa,GAAzC;AACA,QAAIG,UAAJ,EAAgB;AACdb,gBAAUK,KAAV,CAAgB,IAAhB;AACD;AACD,QAAIO,OAAJ,EAAa;AACX,UAAI,CAACC,UAAL,EAAiB;AACfb,kBAAUK,KAAV,CAAgB,GAAhB;AACD;AACDL,gBAAUK,KAAV,CAAgB,QAAhB;AACD;AACD,QAAIU,mBAAmBA,gBAAgBE,MAAhB,GAAyB,CAAhD,EAAmD;AACjD,UAAI,CAACJ,UAAL,EAAiB;AACfb,kBAAUK,KAAV,CAAgB,GAAhB;AACD,OAFD,MAEO;AACLL,kBAAUK,KAAV,CAAgB,GAAhB;AACD;AACDL,gBAAUK,KAAV,CAAiB,GAAEU,gBAAgBG,GAAhB,CAAoBC,KAAM,GAAE,4BAAWA,CAAX,CAAc,UAA1C,EAAqDC,IAArD,CAA0D,KAA1D,CAAiE,IAApF;AACD;AACDpB,cAAUM,SAAV,CAAoB,EAAEC,UAAUG,YAAZ,EAApB;AACAV,cAAUQ,WAAV,CAAsBP,OAAtB;AACAD,cAAUS,QAAV;AACA,QAAII,cAAcE,eAAd,IAAiCA,gBAAgBE,MAAhB,GAAyB,CAA9D,EAAiE;AAC/DjB,gBAAUK,KAAV,CAAgB,GAAhB;AACD;AACD,QAAIO,OAAJ,EAAa;AACXZ,gBAAUK,KAAV,CAAgB,IAAhB;AACD;AACF,GA5BD,MA4BO,IAAIU,mBAAmBA,gBAAgBE,MAAhB,GAAyB,CAAhD,EAAmD;AACxDjB,cAAUgB,cAAV,CAA0B,GAAEN,YAAa,KAAIE,UAAU,QAAV,GAAqB,EAAG,GAAEG,gBAAgBG,GAAhB,CAAoBC,KAAM,GAAE,4BAAWA,CAAX,CAAc,UAA1C,EAAqDC,IAArD,CAA0D,KAA1D,CAAiE,GAAER,UAAU,GAAV,GAAgB,EAAG,EAA7J;AACD,GAFM,MAEA;AACLZ,cAAUgB,cAAV,CAA0B,GAAEN,YAAa,KAAIH,QAAS,EAAtD;AACD;AACDP,YAAUK,KAAV,CAAgB,GAAhB;AACD;;AAEM,SAASN,oBAAT,CAA8BC,SAA9B,EAAyCqB,UAAzC,EAAqD;AAC1D,MAAI,CAACA,UAAL,EAAiB;AACjBA,aAAWC,OAAX,CAAmBC,YAAYzB,oBAAoBE,SAApB,EAA+BuB,QAA/B,CAA/B;AACD","file":"language.js","sourcesContent":["import {\n  join,\n  wrap,\n} from '../utilities/printing';\n\nimport { pascalCase } from 'change-case';\n\nexport function typeDeclaration(generator, { interfaceName }, closure) {\n  generator.printNewlineIfNeeded();\n  generator.printNewline();\n  generator.print(`export type ${ interfaceName } =`);\n  generator.pushScope({ typeName: interfaceName });\n  generator.withinBlock(closure);\n  generator.popScope();\n  generator.print(';');\n}\n\nexport function propertyDeclaration(generator, { propertyName, typeName, description, isArray, isNullable, inInterface, fragmentSpreads }, closure) {\n  generator.printOnNewline(description && `// ${description}`);\n  if (closure) {\n    generator.printOnNewline(`${propertyName}:`);\n    if (isNullable) {\n      generator.print(' ?');\n    }\n    if (isArray) {\n      if (!isNullable) {\n        generator.print(' ');\n      }\n      generator.print('Array<');\n    }\n    if (fragmentSpreads && fragmentSpreads.length > 0) {\n      if (!isNullable) {\n        generator.print(' ');\n      } else {\n        generator.print('(');\n      }\n      generator.print(`${fragmentSpreads.map(n => `${pascalCase(n)}Fragment`).join(' & ')} &`);\n    }\n    generator.pushScope({ typeName: propertyName });\n    generator.withinBlock(closure);\n    generator.popScope();\n    if (isNullable && fragmentSpreads && fragmentSpreads.length > 0) {\n      generator.print(')');\n    }\n    if (isArray) {\n      generator.print(' >');\n    }\n  } else if (fragmentSpreads && fragmentSpreads.length > 0) {\n    generator.printOnNewline(`${propertyName}: ${isArray ? 'Array<' : ''}${fragmentSpreads.map(n => `${pascalCase(n)}Fragment`).join(' & ')}${isArray ? '>' : ''}`);\n  } else {\n    generator.printOnNewline(`${propertyName}: ${typeName}`);\n  }\n  generator.print(',');\n}\n\nexport function propertyDeclarations(generator, properties) {\n  if (!properties) return;\n  properties.forEach(property => propertyDeclaration(generator, property));\n}\n"]}