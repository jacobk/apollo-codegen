{"version":3,"sources":["../../src/flow/codeGeneration.js"],"names":["generateSource","typeDeclarationForGraphQLType","interfaceVariablesDeclarationForOperation","typeDeclarationForOperation","typeDeclarationForFragment","propertiesFromFields","propertyFromField","propertyDeclarations","context","generator","printOnNewline","typesUsed","forEach","type","operations","operation","fragments","output","enumerationDeclaration","structDeclarationForInputObjectType","name","description","values","getValues","printNewlineIfNeeded","nValues","length","value","i","printNewline","interfaceName","properties","getFields","interfaceNameFromOperation","operationName","operationType","variables","fields","fragmentsReferenced","source","fragmentSpreads","extendTypes","map","f","fragmentName","typeCondition","inlineFragments","concat","fragment","forceNullable","field","fieldName","fieldType","responseName","propertyName","property","namedType","bareTypeName","singularize","typeName","isArray","ofType","isNullable","isComposite","inInterface"],"mappings":"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","file":"codeGeneration.js","sourcesContent":["import {\n  GraphQLError,\n  getNamedType,\n  isCompositeType,\n  isAbstractType,\n  isEqualType,\n  GraphQLScalarType,\n  GraphQLEnumType,\n  GraphQLList,\n  GraphQLNonNull,\n  GraphQLID,\n  GraphQLInputObjectType\n} from 'graphql'\n\nimport  { isTypeProperSuperTypeOf } from '../utilities/graphql';\n\nimport { camelCase, pascalCase } from 'change-case';\nimport Inflector from 'inflected';\n\nimport {\n  join,\n  wrap,\n} from '../utilities/printing';\n\nimport CodeGenerator from '../utilities/CodeGenerator';\n\nimport {\n  typeDeclaration,\n  propertyDeclaration,\n} from './language';\n\nimport {\n  typeNameFromGraphQLType,\n} from './types';\n\nexport function generateSource(context) {\n  const generator = new CodeGenerator(context);\n\n  generator.printOnNewline('/* @flow */');\n  generator.printOnNewline('//  This file was automatically generated and should not be edited.');\n  typeDeclarationForGraphQLType(context.typesUsed.forEach(type =>\n    typeDeclarationForGraphQLType(generator, type)\n  ));\n  Object.values(context.operations).forEach(operation => {\n    interfaceVariablesDeclarationForOperation(generator, operation);\n    typeDeclarationForOperation(generator, operation);\n  });\n  Object.values(context.fragments).forEach(operation =>\n    typeDeclarationForFragment(generator, operation)\n  );\n\n  return generator.output;\n}\n\nexport function typeDeclarationForGraphQLType(generator, type) {\n  if (type instanceof GraphQLEnumType) {\n    enumerationDeclaration(generator, type);\n  } else if (type instanceof GraphQLInputObjectType) {\n    structDeclarationForInputObjectType(generator, type);\n  }\n}\n\nfunction enumerationDeclaration(generator, type) {\n  const { name, description } = type;\n  const values = type.getValues();\n\n  generator.printNewlineIfNeeded();\n  generator.printOnNewline(description && `// ${description}`);\n  generator.printOnNewline(`export type ${name} =`);\n  const nValues = values.length;\n  values.forEach((value, i) =>\n    generator.printOnNewline(`  \"${value.value}\"${i === nValues-1 ? ';' : ' |'}${wrap(' // ', value.description)}`)\n  );\n  generator.printNewline();\n}\n\nfunction structDeclarationForInputObjectType(\n  generator,\n  type\n  ) {\n  const interfaceName = pascalCase(type.name);\n  typeDeclaration(generator, {\n    interfaceName,\n  }, () => {\n    const properties = propertiesFromFields(generator.context, Object.values(type.getFields()));\n    propertyDeclarations(generator, properties, true);\n  });\n}\n\nfunction interfaceNameFromOperation({operationName, operationType}) {\n  switch (operationType) {\n    case 'query':\n      return `${pascalCase(operationName)}Query`;\n      break;\n    case 'mutation':\n      return `${pascalCase(operationName)}Mutation`;\n      break;\n    case 'subscription':\n      return `${pascalCase(operationName)}Subscription`;\n      break;\n    default:\n      throw new GraphQLError(`Unsupported operation type \"${operationType}\"`);\n  }\n}\n\nexport function interfaceVariablesDeclarationForOperation(\n  generator,\n  {\n    operationName,\n    operationType,\n    variables,\n    fields,\n    fragmentsReferenced,\n    source,\n  }\n) {\n  if (!variables || variables.length < 1) {\n    return null;\n  }\n  const interfaceName = `${interfaceNameFromOperation({operationName, operationType})}Variables`;\n\n  typeDeclaration(generator, {\n    interfaceName,\n  }, () => {\n    const properties = propertiesFromFields(generator.context, variables);\n    propertyDeclarations(generator, properties, true);\n  });\n}\n\nexport function typeDeclarationForOperation(\n  generator,\n  {\n    operationName,\n    operationType,\n    variables,\n    fields,\n    fragmentSpreads,\n    fragmentsReferenced,\n    source,\n  }\n) {\n  const interfaceName = interfaceNameFromOperation({operationName, operationType});\n  typeDeclaration(generator, {\n    interfaceName,\n    extendTypes: fragmentSpreads ? fragmentSpreads.map(f => `${pascalCase(f)}Fragment`) : null,\n  }, () => {\n    const properties = propertiesFromFields(generator.context, fields);\n    propertyDeclarations(generator, properties, true);\n  });\n}\n\nexport function typeDeclarationForFragment(\n  generator,\n  {\n    fragmentName,\n    typeCondition,\n    fields,\n    inlineFragments,\n    fragmentSpreads,\n    source,\n  }\n) {\n  const interfaceName = `${pascalCase(fragmentName)}Fragment`;\n\n  typeDeclaration(generator, {\n    interfaceName,\n    extendTypes: fragmentSpreads ? fragmentSpreads.map(f => `${pascalCase(f)}Fragment`) : null,\n  }, () => {\n    const properties = propertiesFromFields(generator.context, fields)\n    .concat(...(inlineFragments || []).map(fragment =>\n      propertiesFromFields(generator.context, fragment.fields, true)\n    ));\n\n    propertyDeclarations(generator, properties, true);\n  });\n}\n\nexport function propertiesFromFields(context, fields, forceNullable) {\n  return fields.map(field => propertyFromField(context, field, forceNullable));\n}\n\nexport function propertyFromField(context, field, forceNullable) {\n  let { name: fieldName, type: fieldType, description, fragmentSpreads, inlineFragments } = field;\n  fieldName = fieldName || field.responseName;\n\n  const propertyName = fieldName;\n\n  let property = { fieldName, fieldType, propertyName, description };\n\n  const namedType = getNamedType(fieldType);\n\n  if (isCompositeType(namedType)) {\n    const bareTypeName = pascalCase(Inflector.singularize(propertyName));\n    const typeName = typeNameFromGraphQLType(context, fieldType, bareTypeName);\n    let isArray = false;\n    if (fieldType instanceof GraphQLList) {\n      isArray = true;\n    } else if (fieldType instanceof GraphQLNonNull && fieldType.ofType instanceof GraphQLList) {\n      isArray = true;\n    }\n    let isNullable = true;\n    if (fieldType instanceof GraphQLNonNull && !forceNullable) {\n      isNullable = false;\n    }\n    return {\n      ...property,\n      typeName, bareTypeName, fields: field.fields, isComposite: true, fragmentSpreads, inlineFragments, fieldType,\n      isArray, isNullable,\n    };\n  } else {\n    const typeName = typeNameFromGraphQLType(context, fieldType);\n    return { ...property, typeName, isComposite: false, fieldType };\n  }\n}\n\nexport function propertyDeclarations(generator, properties, inInterface) {\n  if (!properties) return;\n  properties.forEach(property => {\n    if (property.fields && property.fields.length > 0 || property.inlineFragments && property.inlineFragments.length > 0) {\n      propertyDeclaration(generator, {...property, inInterface}, () => {\n        const properties = propertiesFromFields(generator.context, property.fields)\n        .concat(...(property.inlineFragments || []).map(fragment =>\n          propertiesFromFields(generator.context, fragment.fields, true)\n        ));\n        propertyDeclarations(generator, properties);\n      });\n    } else {\n      propertyDeclaration(generator, {...property, inInterface});\n    }\n  });\n}\n"]}