{"version":3,"sources":["../../src/utilities/CodeGenerator.js"],"names":["CodeGenerator","constructor","context","scopeStack","indentWidth","indentLevel","output","pushScope","scope","push","popScope","pop","print","maybeString","printNewline","startOfIndentLevel","printNewlineIfNeeded","printOnNewline","printIndent","indentation","repeat","withIndent","closure","withinBlock"],"mappings":";;;;;;AAAA;;AAKe,MAAMA,aAAN,CAAoB;AACjCC,cAAYC,OAAZ,EAAqB;AACnB,SAAKA,OAAL,GAAeA,OAAf;;AAEA,SAAKC,UAAL,GAAkB,EAAlB;;AAEA,SAAKC,WAAL,GAAmB,CAAnB;AACA,SAAKC,WAAL,GAAmB,CAAnB;;AAEA,SAAKC,MAAL,GAAc,EAAd;AACD;;AAEDC,YAAUC,KAAV,EAAiB;AACf,SAAKL,UAAL,CAAgBM,IAAhB,CAAqBD,KAArB;AACD;;AAEDE,aAAW;AACT,WAAO,KAAKP,UAAL,CAAgBQ,GAAhB,EAAP;AACD;;AAEDC,QAAMC,WAAN,EAAmB;AACjB,QAAIA,WAAJ,EAAiB;AACf,WAAKP,MAAL,IAAeO,WAAf;AACD;AACF;;AAEDC,iBAAe;AACb,QAAI,KAAKR,MAAT,EAAiB;AACf,WAAKM,KAAL,CAAW,IAAX;AACA,WAAKG,kBAAL,GAA0B,KAA1B;AACD;AACF;;AAEDC,yBAAuB;AACrB,QAAI,CAAC,KAAKD,kBAAV,EAA8B;AAC5B,WAAKD,YAAL;AACD;AACF;;AAEDG,iBAAeJ,WAAf,EAA4B;AAC1B,QAAIA,WAAJ,EAAiB;AACf,WAAKC,YAAL;AACA,WAAKI,WAAL;AACA,WAAKN,KAAL,CAAWC,WAAX;AACD;AACF;;AAEDK,gBAAc;AACZ,UAAMC,cAAc,IAAIC,MAAJ,CAAW,KAAKf,WAAL,GAAmB,KAAKD,WAAnC,CAApB;AACA,SAAKE,MAAL,IAAea,WAAf;AACD;;AAEDE,aAAWC,OAAX,EAAoB;AAClB,QAAI,CAACA,OAAL,EAAc;;AAEd,SAAKjB,WAAL;AACA,SAAKU,kBAAL,GAA0B,IAA1B;AACAO;AACA,SAAKjB,WAAL;AACD;;AAEDkB,cAAYD,OAAZ,EAAqB;AACnB,SAAKV,KAAL,CAAW,IAAX;AACA,SAAKS,UAAL,CAAgBC,OAAhB;AACA,SAAKL,cAAL,CAAoB,GAApB;AACD;AAjEgC;kBAAdjB,a","file":"CodeGenerator.js","sourcesContent":["import {\n  join,\n  wrap,\n} from './printing';\n\nexport default class CodeGenerator {\n  constructor(context) {\n    this.context = context;\n    \n    this.scopeStack = [];\n\n    this.indentWidth = 2;\n    this.indentLevel = 0;\n\n    this.output = '';\n  }\n\n  pushScope(scope) {\n    this.scopeStack.push(scope);\n  }\n\n  popScope() {\n    return this.scopeStack.pop();\n  }\n\n  print(maybeString) {\n    if (maybeString) {\n      this.output += maybeString;\n    }\n  }\n\n  printNewline() {\n    if (this.output) {\n      this.print('\\n');\n      this.startOfIndentLevel = false;\n    }\n  }\n\n  printNewlineIfNeeded() {\n    if (!this.startOfIndentLevel) {\n      this.printNewline();\n    }\n  }\n\n  printOnNewline(maybeString) {\n    if (maybeString) {\n      this.printNewline();\n      this.printIndent();\n      this.print(maybeString);\n    }\n  }\n\n  printIndent() {\n    const indentation = ' '.repeat(this.indentLevel * this.indentWidth);\n    this.output += indentation;\n  }\n\n  withIndent(closure) {\n    if (!closure) return;\n\n    this.indentLevel++;\n    this.startOfIndentLevel = true;\n    closure();\n    this.indentLevel--;\n  }\n\n  withinBlock(closure) {\n    this.print(' {');\n    this.withIndent(closure);\n    this.printOnNewline('}');\n  }\n}\n"]}