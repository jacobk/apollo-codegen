{"version":3,"sources":["../src/validation.js"],"names":["validateQueryDocument","NoAnonymousQueries","NoExplicitTypename","NoTypenameAlias","schema","document","rules","concat","validationErrors","length","error","context","OperationDefinition","node","name","reportError","Field","fieldName","value","aliasName","alias"],"mappings":";;;;;QAQgBA,qB,GAAAA,qB;QAYAC,kB,GAAAA,kB;QAcAC,kB,GAAAA,kB;QAcAC,e,GAAAA,e;;AAhDhB;;AAMA;;AAEO,SAASH,qBAAT,CAA+BI,MAA/B,EAAuCC,QAAvC,EAAiD;AACtD,QAAMC,QAAQ,CAACL,kBAAD,EAAqBC,kBAArB,EAAyCC,eAAzC,EAA0DI,MAA1D,yBAAd;;AAEA,QAAMC,mBAAmB,uBAASJ,MAAT,EAAiBC,QAAjB,EAA2BC,KAA3B,CAAzB;AACA,MAAIE,oBAAoBA,iBAAiBC,MAAjB,GAA0B,CAAlD,EAAqD;AACnD,SAAK,MAAMC,KAAX,IAAoBF,gBAApB,EAAsC;AACpC,4BAASE,KAAT;AACD;AACD,UAAM,sBAAc,6CAAd,CAAN;AACD;AACF;;AAEM,SAAST,kBAAT,CAA4BU,OAA5B,EAAqC;AAC1C,SAAO;AACLC,uBADK,+BACeC,IADf,EACqB;AACxB,UAAI,CAACA,KAAKC,IAAV,EAAgB;AACdH,gBAAQI,WAAR,CAAoB,0BAClB,kDADkB,EAElB,CAACF,IAAD,CAFkB,CAApB;AAID;AACD,aAAO,KAAP;AACD;AATI,GAAP;AAWD;;AAEM,SAASX,kBAAT,CAA4BS,OAA5B,EAAqC;AAC1C,SAAO;AACLK,SADK,iBACCH,IADD,EACO;AACV,YAAMI,YAAYJ,KAAKC,IAAL,CAAUI,KAA5B;AACA,UAAID,aAAa,YAAjB,EAA+B;AAC7BN,gBAAQI,WAAR,CAAoB,0BAClB,8FADkB,EAElB,CAACF,IAAD,CAFkB,CAApB;AAID;AACF;AATI,GAAP;AAWD;;AAEM,SAASV,eAAT,CAAyBQ,OAAzB,EAAkC;AACvC,SAAO;AACLK,SADK,iBACCH,IADD,EACO;AACV,YAAMM,YAAYN,KAAKO,KAAL,IAAcP,KAAKO,KAAL,CAAWF,KAA3C;AACA,UAAIC,aAAa,YAAjB,EAA+B;AAC7BR,gBAAQI,WAAR,CAAoB,0BAClB,gGADkB,EAElB,CAACF,IAAD,CAFkB,CAApB;AAID;AACF;AATI,GAAP;AAWD","file":"validation.js","sourcesContent":["import {\n  validate,\n  specifiedRules,\n  GraphQLError\n} from 'graphql';\n\nimport { ToolError, logError } from './errors'\n\nexport function validateQueryDocument(schema, document) {\n  const rules = [NoAnonymousQueries, NoExplicitTypename, NoTypenameAlias].concat(specifiedRules);\n\n  const validationErrors = validate(schema, document, rules);\n  if (validationErrors && validationErrors.length > 0) {\n    for (const error of validationErrors) {\n      logError(error);\n    }\n    throw new ToolError(\"Validation of GraphQL query document failed\");\n  }\n}\n\nexport function NoAnonymousQueries(context) {\n  return {\n    OperationDefinition(node) {\n      if (!node.name) {\n        context.reportError(new GraphQLError(\n          'Apollo iOS does not support anonymous operations',\n          [node]\n        ));\n      }\n      return false;\n    }\n  };\n}\n\nexport function NoExplicitTypename(context) {\n  return {\n    Field(node) {\n      const fieldName = node.name.value;\n      if (fieldName == \"__typename\") {\n        context.reportError(new GraphQLError(\n          'Apollo iOS inserts __typename automatically when needed, please do not include it explicitly',\n          [node]\n        ));\n      }\n    }\n  };\n}\n\nexport function NoTypenameAlias(context) {\n  return {\n    Field(node) {\n      const aliasName = node.alias && node.alias.value;\n      if (aliasName == \"__typename\") {\n        context.reportError(new GraphQLError(\n          'Apollo iOS needs to be able to insert __typename when needed, please do not use it as an alias',\n          [node]\n        ));\n      }\n    }\n  };\n}\n"]}